package com.yc.parkcharge2.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yc.parkcharge2.entity.Strate;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STRATE".
*/
public class StrateDao extends AbstractDao<Strate, Long> {

    public static final String TABLENAME = "STRATE";

    /**
     * Properties of entity Strate.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CarType = new Property(1, Integer.class, "carType", false, "CAR_TYPE");
        public final static Property StartTime = new Property(2, String.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(3, String.class, "endTime", false, "END_TIME");
        public final static Property Ratio = new Property(4, double.class, "ratio", false, "RATIO");
        public final static Property Charges = new Property(5, double.class, "charges", false, "CHARGES");
    };


    public StrateDao(DaoConfig config) {
        super(config);
    }
    
    public StrateDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STRATE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CAR_TYPE\" INTEGER," + // 1: carType
                "\"START_TIME\" TEXT," + // 2: startTime
                "\"END_TIME\" TEXT," + // 3: endTime
                "\"RATIO\" REAL NOT NULL ," + // 4: ratio
                "\"CHARGES\" REAL NOT NULL );"); // 5: charges
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STRATE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Strate entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer carType = entity.getCarType();
        if (carType != null) {
            stmt.bindLong(2, carType);
        }
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(3, startTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(4, endTime);
        }
        stmt.bindDouble(5, entity.getRatio());
        stmt.bindDouble(6, entity.getCharges());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Strate entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer carType = entity.getCarType();
        if (carType != null) {
            stmt.bindLong(2, carType);
        }
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(3, startTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(4, endTime);
        }
        stmt.bindDouble(5, entity.getRatio());
        stmt.bindDouble(6, entity.getCharges());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Strate readEntity(Cursor cursor, int offset) {
        Strate entity = new Strate( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // carType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // startTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // endTime
            cursor.getDouble(offset + 4), // ratio
            cursor.getDouble(offset + 5) // charges
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Strate entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCarType(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setStartTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEndTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRatio(cursor.getDouble(offset + 4));
        entity.setCharges(cursor.getDouble(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Strate entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Strate entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
